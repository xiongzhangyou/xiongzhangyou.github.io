<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024-基于时空自监督学习的交通流预测ST-SSL模型</title>
      <link href="/2024/06/27/xzy/"/>
      <url>/2024/06/27/xzy/</url>
      
        <content type="html"><![CDATA[<p>研究背景<br>现有的时空相关性方法仍然存在两个关键的局限性：</p><ol><li>大多数模型集中预测所有区域的交通流量，而没有考虑空间异质性，即不同区域的交通流量分布可能存在偏差。如图1(a)中，A和B是北京两个具有不同城市功能的真实区域，住宅区和交通枢纽，从图1(b)中能够观察到它们具有不同的交通流量分布。</li><li>这些模型无法捕捉时变交通模式引起的时间异质性。如图1(c)工作日和节假日的夜间交通模式可能会有显著差异。<br>![[Pasted image 20240528144841.png]]<br>为了解决这两个局限性：<br>1.本文一种新的时空自监督学习(ST-SSL1)交通预测框架，该框架通过辅助的自监督学习范式，增强了交通模式表征，以反映时空异质性。<br>2.具体来说，ST-SSL构建在一个集成模块上，具有时间和空间卷积，用于跨空间和时间编码信息。<br>3.实现自适应时空自监督学习，本文在属性和结构级别对交通流图数据进行自适应增强，增强流量图的基础上，构建了两个SSL辅助任务，通过时空异构感知增强对主要流量预测任务进行补充。</li></ol><p>#模型框架<br>图2:(a): ST-SSL的总体架构。(b):空间异质性模型。(c):时间异质性模型。<br>![[Pasted image 20240528150340.png]]<br>![[Pasted image 20240528150416.png]]<br>（1）时空编码器Spatio-Temporal Encoder：</p><ol><li>提出了一种时空编码器来共同保存交通流图上的ST上下文信息，我们将时间卷积分量与图卷积传播网络相结合，作为时空关系表示的主干。</li><li>建模时间交通模式：具有门控机制的沿时间维度的1D因果卷积<br>![[Pasted image 20240528151348.png]]<br>![[Pasted image 20240528151421.png]]<br>3.捕获区域空间相关性：空间图卷积 (ChebNet)<br>![[Pasted image 20240528151545.png]]<br>![[Pasted image 20240528151554.png]]<br>（2）交通流量图上的自适应图增广 (Adaptive Graph Augmentation on TFG)<br>本文在TFG G &#x3D; (V, E, A, Xt−T: T)上设计了两阶段的图增强方案，分别是流量级数据增强和图拓扑级结构增强，这两阶段方案根据学习到的异构感知区域依赖关系的流量规律自适应。</li></ol><p>1.区域异质性测量<br>![[Pasted image 20240528152105.png]]<br>![[Pasted image 20240528152120.png]]<br>2.Traffic-level增大<br>![[Pasted image 20240528152227.png]]3.图拓扑级增强<br>![[Pasted image 20240528152347.png]]<br>（3）基于SSL的空间异质性建模<br>![[Pasted image 20240528152843.png]]<br>![[Pasted image 20240528152932.png]]<br>区域聚类的分布正则化<br>![[Pasted image 20240528153002.png]]<br>![[Pasted image 20240528153011.png]]<br>（4）用于时间异质性建模的SSL<br>![[Pasted image 20240528153726.png]]<br>![[Pasted image 20240528155005.png]]<br>#模型训练<br>![[Pasted image 20240528155202.png]]<br>![[Pasted image 20240528155214.png]]<br>#实验<br>实验总结为回答以下研究问题:<br>RQ1:与各种基准相比，ST-SSL的总体流量预测性能如何?RQ2:设计的不同子模块对模型性能的贡献是什么?<br>RQ3:对于异构空间区域和不同时间段，ST-SSL的性能如何?<br>RQ4:增广图和学习表征如何使模型受益?</p><p>数据集：<br>![[Pasted image 20240528160534.png]]<br>交通预测误差可视化。<br>图3显示了ST-SSL和BJTaxi数据集上两个最佳基线的预测误差(|x * n−xn|&#x2F;xn)，其中像素越亮意味着误差越大。仍然可以看出我们模型的优越性，这与表2的定量结果是一致的。有趣的是，ST-SSL在郊区表现出显著的改善(图3中的绿框)，这证明了在全球相似区域之间传递信息的空间异质性建模的有效性。<br>![[Pasted image 20240528160604.png]]<br>表2给出了各种方法的比较结果。我们用5种不同的种子运行所有深度学习模型，并报告平均性能及其标准差。<br>![[Pasted image 20240528160715.png]]<br>#消融实验</p><ul><li>ST-SSL-sa：随机移除和添加边的方法代替Graph Topology-level Augmentation；</li><li>ST-SSL-ta：随机mask掉交通流量数据的方法代替Traffic-level Augmentation；</li><li>ST-SSL-sh：禁用了空间异质性建模的自监督任务；</li><li>ST-SSL-th：禁用了时间异质性建模的自监督任务。<br>![[Pasted image 20240528161543.png]]<br>结果如图4所示。我们可以观察到ST-SSL优于随机增强的变体表明我们的自适应异构引导数据增强在流量级和图结构级的有效性。此外，ST-SSL始终优于ST-SSL-sh和ST-SSL-th，这证明了联合建模时空异质性的必要性。综上所述，每个设计的子模块都对性能提升有积极的影响。</li></ul><p>（1）ST-SSL的鲁棒性分析<br>(a)空间集群(b)空间表现(c)时间类别(d)时间业绩<br>不太受欢迎的地区(用黑色圆圈标记)<br>![[Pasted image 20240528164219.png]]<br>对于空间异质性，使用交通流量数据的统计数据（平均值、中值、标准差）对区域进行聚类，结果如图5(a)所示。图5(b)显示了不同聚类的预测性能。</p><p>对于时间异质性，如图5(c)将一个工作日划分为四个时间段，将一个节假日（包括周末）划分为两个时间段，图5(d)显示了不同时间段的预测性能。</p><p>（2）定性研究<br>图6:自适应图形增强的案例研究。<br>![[Pasted image 20240528164758.png]]<br>在图6中，我们研究了BJTaxi上的异构引导图拓扑级增强。我们的增强方法自适应地去除了具有异构交通模式的相邻区域之间的连接，即左家庄住宅区和三元桥(一个交通枢纽)。同时，在城市潜在功能相似的遥远区域之间建立联系，如西直门大桥和三元大桥，都是交通枢纽。通过这种方式，我们的ST-SSL不仅可以消除低相互关联交通模式的区域连接，还可以捕获全球城市背景下的长期区域依赖关系。</p><p>图7:BJTaxi上嵌入的t-SNE可视化。<br>![[Pasted image 20240528164925.png]]如图7所示，ST-SSL的同类样品更加致密，而不同类别样品的分离效果明显更好。这使得ST-SSL能够意识到空间异质性，并在同一类别的区域之间传递信息，从而促进预测。</p>]]></content>
      
      
      <categories>
          
          <category> 交通预测论文研读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本命令</title>
      <link href="/2017/05/26/hello-world/"/>
      <url>/2017/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>此章介绍Linux的基本命令<br>Linux的目录结构<br>Linux路径的描述方式<br>Linux命令入门<br>ls命令<br>ls 命令的 -a选项<br>ls命令的 -l选项<br>ls命令选项的组合使用<br>ls选项和参数的组合使用<br>ls 命令的 -h选项<br>目录切换相关命令(cd&#x2F;pwd)<br>cd 切换工作目录<br>pwd 查看当前工作目录<br>相对路径、绝对路径和特殊路径符<br>相对路径和绝对路径<br>特殊路径符**<br>创建目录命令(mkdir)<br>文件操作命令part1(touch、cat、more）<br>touch 创建文件<br>cat命令 查看文件内容<br>more命令查看文件内容<br>文件操作命令part2(cp、mv、rm）<br>cp命令复制文件文件夹<br>mv移动文件或文件夹<br>rm删除文件、文件夹<br>查找命令(which、find）<br>which命令<br>find命令<br>grep、wc和管道符<br>grep命令<br>wc命令做数量统计<br>管道符<br>echo、tail和重定向符<br>echo命令<br>重定向符<br>tail持续跟踪文件更改<br>vi编辑器<br>vi编辑器的快速体验<br>Linux的目录结构<br>Linux的目录结构是一个树型结构<br>Windows 系统可以拥有多个盘符, 如 C盘、D盘、E盘<br>Linux没有盘符这个概念, 只有一个根目录 &#x2F;, 所有文件都在它下面</p><p>Linux路径的描述方式<br>在Linux系统中，路径之间的层级关系，使用：&#x2F; 来表示<br>在Windows系统中，路径之间的层级关系，使用： \ 来表示</p><p>Linux命令入门<br>ls命令<br>ls命令的作用是列出目录下的内容，语法细节如下：</p><p>-a -l -h 是可选的选项<br>Linux路径是此命令可选的参数<br>不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容</p><p>ls 命令的 -a选项<br>如下语法，ls命令是可以使用选项的</p><p>-a选项，表示：all的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹）</p><p>可以看到，ls -a 对比 ls 列出的内容更多了。<br>图中以.开头的，表示是Linux系统的隐藏文件&#x2F;文件夹（只要以.开头，就能自动隐藏）<br>只有通过-a选项，才能看到这些隐藏的文件&#x2F;文件夹<br>ls命令的 -l选项</p><p>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</p><p>ls命令选项的组合使用<br>语法中的选项是可以组合使用的，比如学习的-a和-l可以组合应用。<br>写法：</p><p>ls -l -a<br>ls -la<br>ls -al<br>上述三种写法，都是一样的，表示同时应用-l和-a的功能</p><p>ls选项和参数的组合使用<br>除了选项本身可以组合以外，选项和参数也可以一起使用。</p><p>ls 命令的 -h选项<br>-h 表示以易于阅读的形式，列出文件大小，如K、M、G<br>-h选项必须要搭配 -l 一起使用<br>使用-h选项后</p><p>目录切换相关命令(cd&#x2F;pwd)<br>cd 切换工作目录<br>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录<br>我们可以通过cd命令，更改当前所在的工作目录。<br>语法：cd [Linux路径]</p><p>cd命令无需选项，只有参数，表示要切换到哪个目录下<br>cd命令直接执行，不写参数，表示回到用户的HOME目录</p><p>pwd 查看当前工作目录<br>通过ls来验证当前的工作目录，其实是不恰当的。<br>我们可以通过pwd命令，来查看当前所在的工作目录。</p><p>pwd命令，无选项，无参数，直接输入pwd即可</p><p>相对路径、绝对路径和特殊路径符<br>相对路径和绝对路径<br>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以&#x2F;开头<br>相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以&#x2F;开头</p><p>如图，通过pwd得知当前所在是HOME目录：&#x2F;home&#x2F;itheima<br>现在想要通过cd命令，切换工作目录到Desktop文件夹中去。<br>那么，cd命令的参数（Linux路径）如何写呢？</p><p>cd &#x2F;home&#x2F;itheima&#x2F;Desktop 绝对路径<br>cd Desktop 相对路径<br>上述两种写法，都可以正确的切换目录到指定的Desktop中。<br>特殊路径符**</p><p>如图，当前工作目录处于：&#x2F;home&#x2F;itheima&#x2F;Desktop<br>现在想要，向上回退一级，切换目录到&#x2F;home&#x2F;itheima中，如何做？</p><p>可以直接通过cd，即可回到HOME目录</p><p>也可以通过特殊路径符来完成。<br>特殊路径符：</p><p>**.**表示当前目录，比如 cd .&#x2F;Desktop 表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</p><p><strong>…</strong>表示上一级目录，比如：cd … 即可切换到上一级目录，cd …&#x2F;… 切换到上二级的目录</p><p>~ 表示HOME目录，比如：cd ~ 即可切换到HOME目录或cd ~&#x2F;Desktop，切换到HOME内的Desktop目录</p><p>创建目录命令(mkdir)<br>通过mkdir命令可以创建新的目录（文件夹）<br>语法：</p><p>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可<br>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</p><p>mkdir -p 选项<br>如果想要一次性创建多个层级的目录，如下图</p><p>会报错，因为上级目录itcast和good并不存在，所以无法创建666目录<br>可以通过-p选项，将一整个链条都创建完成。</p><p>注意：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作<br>涉及到权限问题，HOME外无法成功<br>后续我们会讲解权限管控的知识<br>文件操作命令part1(touch、cat、more）<br>touch 创建文件<br>可以通过touch命令创建文件<br>语法：touch Linux[路径]</p><p>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</p><p>cat命令 查看文件内容<br>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</p><p>more命令查看文件内容<br>more命令同样可以查看文件内容，同cat不同的是：</p><p>cat是直接将内容全部显示出来<br>more支持翻页，如果文件内容过多，可以一页页的展示<br>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用<br>Linux系统内置有一个文件，路径为：&#x2F;etc&#x2F;services，可以使用more命令查看<br>more &#x2F;etc&#x2F;services<br>在查看的过程中，通过空格翻页<br>通过q退出查看<br>文件操作命令part2(cp、mv、rm）<br>cp命令复制文件文件夹<br>p命令可以用于复制文件\文件夹，cp命令来自英文单词：copy<br>语法：cp [-r] 参数1 参数2</p><p>-r 选项，可选，用于复制文件夹使用，表示递归<br>参数1，Linux路径，表示被复制的文件或文件夹<br>参数2，Linux路径，表示要复制去的地方<br>复制文件</p><p>复制文件夹</p><p>注意：复制文件夹，必须使用-r选项，否则不会生效<br>mv移动文件或文件夹<br>语法： mv 参数1 参数2</p><p>参数1，Linux路径，表示被移动的文件或文件夹<br>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</p><p>rm删除文件、文件夹<br>rm命令可用于删除文件、文件夹<br>语法： rm [-r -f] 参数1 参数2 … 参数N</p><p>同cp命令一样，-r 选项用于删除文件夹<br>-f 表示force，强制删除（不会弹出提示确认信息）<br>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示<br>所以一般普通用户用不到-f选项<br>参数1、参数2、…、参数N 表示要删除的文件或文件夹路径，按照空格隔开<br>删除文件</p><p>删除多个文件</p><p>rm命令支持通配符 <em>，用来做模糊匹配<br>符号 * 表示通配符，即匹配任意内容（包含空），示例：<br>test</em>，表示匹配任何以test开头的内容<br>*test，表示匹配任何以test结尾的内容<br>test，表示匹配任何包含test的内容<br>例如：<br>删除所有以test开头的文件或文件夹</p><p>切记切记 如下命令，请千万千万不要在root管理员用户下执行：<br>rm -rf &#x2F;<br>rm -rf &#x2F;*<br>效果等同于在Windows上执行C盘格式化。<br>查找命令(which、find）<br>which命令<br>我们可以通过which命令，查看所使用的一系列命令的程序文件存放在哪里<br>语法： which 要查找的命令</p><p>find命令<br>find命令 - 按文件名查找文件<br>在Linux系统中，我们可以通过find命令去搜索指定的文件。<br>语法：为了确保后续演示，拥有最大的权限，可以在整个系统完成搜索<br>我们可以切换到root用户以获得管理员权限<br>执行命令：<br>su - root<br>然后输入你的密码<br>例如：查找文件名叫做：test的文件，从根目录开始搜索</p><p>find命令 - 通配符<br>被查找文件名，支持使用通配符 * 来做模糊查询。<br>基于通配符的含义，可以结合find命令做文件的模糊查询。<br>查找所有以test开头的文件：find &#x2F; -name “test*”</p><p>find命令 - 按文件大小查找文件<br>语法：find 起始路径 -size + |-n[KMG]|</p><p>+、- 表示大于和小于<br>n表示大小数字<br>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB<br>例如：</p><p>查找小于10KB的文件： find &#x2F; -size -10k<br>查找大于100MB的文件：find &#x2F; -size +100M<br>grep、wc和管道符<br>grep命令<br>可以通过grep命令，从文件中通过关键字过滤文件行。<br>语法： grep [-n] 关键字 文件路径</p><p>选项-n，可选，表示在结果中显示匹配的行的行号。<br>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来<br>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口<br>现在，通过touch命令在HOME目录创建itheima.txt，并通过图形化页面编辑并保存如下内容：</p><p>过滤itheima关键字</p><p>过滤itcast关键字</p><p>过滤code关键字，并显示行号</p><p>wc命令做数量统计<br>可以通过wc命令统计文件的行数、单词数量等<br>语法：wc [-c -m -l -w] 文件路径</p><p>选项，-c，统计bytes数量<br>选项，-m，统计字符数量<br>选项，-l，统计行数<br>选项，-w，统计单词数量<br>参数，文件路径，被统计的文件，可作为内容输入端口<br>不带选项，统计文件</p><p>统计字节数<br>统计字符数</p><p>统计行数<br>统计单词数</p><p>管道符<br>学习了grep命令后，我们在来学习一个新的特殊符号，管道符：|<br>管道符的含义是：将管道符左边命令的结果，作为右边命令的输入<br>如上图：</p><p>cat itheima.txt的输出结果（文件内容）<br>作为右边grep命令的输入（被过滤文件）<br>管道符的应用非常多<br>ls | grep Desktop，过滤ls的结果</p><p>find &#x2F; -name “test” | grep “&#x2F;usr&#x2F;lib64”，过滤结果，只找路径带有&#x2F;usr&#x2F;lib64的结果</p><p>cat itheima.txt | grep itcast | grep itheima，可以嵌套使用哦</p><p>cat itheima.txt的结果给 grep itcast 使用<br>cat itheima.txt | grep itcast 的结果给 grep itheima使用<br>echo、tail和重定向符<br>echo命令<br>可以使用echo命令在命令行内输出指定内容<br>语法：echo 输出的内容<br>例如：<br>在终端上显示：Hello Linux</p><p>带有空格或\等特殊符号，建议使用双引号包围<br>因为不包围的话，空格后很容易被识别为参数2，尽管echo不受影响，但是要养成习惯哦</p><p>反引号&#96;<br>看一下如下命令：echo pwd</p><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了。</p><p>我们可以通过将命令用反引号（通常也称之为飘号）将其包围 被包围的内容，会被作为命令执行，而非普通字符</p><p>重定向符<br>我们再来学习两个特殊符号，重定向符：&gt;和&gt;&gt;</p><p>使用&gt;将左侧命令的结果，覆盖写入到符号右侧指定的文件中<br>使用&gt;&gt;将左侧命令的结果，追加写入到符号右侧指定的文件中<br>例如：<br>echo “Hello Linux” &gt; itheima.txt<br>echo “Hello itheima” &gt; itheima.txt，再次执行，覆盖新内容</p><p>echo “Hello itcast” &gt;&gt; itheima.txt，再次执行，使用&gt;&gt;追加新内容</p><p>tail持续跟踪文件更改<br>使用-f选项，可以持续跟踪文件更改<br>复制一个新的FinalShell的标签</p><p>在第一个标签中，执行：touch test.txt，创建一个test.txt文件<br>在第一个标签中，执行：tail -f test.txt，持续跟踪文件更改<br>在第二个标签中，多次执行：echo “内容” &gt;&gt; test.txt，向文件追加内容<br>观察第一个标签的变化<br>vi编辑器<br>vi\vim编辑器介绍<br>vi\vim是visual interface的简称, 是Linux中最经典的文本编辑器<br>同图形化界面中的 文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择。<br>vim 是 vi 的加强版本，兼容 vi 的所有指令，不仅能编辑文本，而且还具有 shell 程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p><p>vi\vim编辑器的三种工作模式</p><p>命令模式（Command mode）</p><p>命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能。<br>此模型下，不能自由进行文本编辑。<br>输入模式（Insert mode）</p><p>也就是所谓的编辑模式、插入模式。<br>此模式下，可以对文件内容进行自由编辑。<br>底线命令模式（Last line mode）</p><p>以：开始，通常用于文件的保存、退出。</p><p>命令模式<br>如果需要通过vi&#x2F;vim编辑器编辑文件，请通过如下命令：<br>vi 文件路径<br>vim 文件路径<br>vim兼容全部的vi功能，后续全部使用vim命令<br>如果文件路径表示的文件不存在，那么此命令会用于编辑新文件<br>如果文件路径表示的文件存在，那么此命令用于编辑已有文件<br>vi编辑器的快速体验<br>通过vi&#x2F;vim命令编辑文件，会打开一个新的窗口，此时这个窗口就是：命令模式窗口<br>命令模式是vi编辑器的入口和出口，如上图</p><p>进入vi编辑器会进入命令模式<br>通过命令模式输入键盘指令，可以进入输入模式<br>输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式<br>快速体验<br>1.使用：vim hello.txt，编辑一个新文件，执行后进入的是命令模式<br>2.在命令模式内，按键盘 i ，进入输入模式<br>3.在输入模式内输入：itheima and itcast.<br>4.输入完成后，按esc回退会命令模式<br>5.在命令模式内，按键盘 : ，进入底线命令模式<br>6.在底线命令内输入：wq，保存文件并退出vi编辑器</p><p>命令模式快捷键</p><p>底线命令模式快捷键<br>编辑模式没有什么特殊的，进入编辑模式后，任何快捷键都没有作用，就是正常输入文本而已。<br>唯一大家需要记住的，就是：通过esc，可以退回到命令模式中即可。<br>命令模式内，输入: ，即可进入底线命令模式，支持如下命令：</p><p>查看命令帮助和手册<br>如果想要对命令的其它选项进行查阅，可以通过如下方式：</p><p>任何命令都支持：–help 选项， 可以通过这个选项，查看命令的帮助。<br>如：ls –help， 会列出ls命令的帮助文档</p><p>如果想要查看命令的详细手册，可以通过man（manual， 手册）命令查看<br>比如：<br>man ls，就是查看ls命令的详细手册<br>man cd，就是查看cd命令的详细手册<br>大多数手册都是全英文的，如果阅读吃力，可以通过重定向符：man ls &gt; ls-man.txt，输出手册到文件<br>然后通过翻译软件翻译内容查看哦</p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<p>java<br>c<br>c++</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
